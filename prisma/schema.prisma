generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String            @id @default(cuid())
  email                 String            @unique
  name                  String?
  password              String?
  profileImageUrl       String?
  profileImagePath      String?
  status                UserStatus        @default(OFFLINE)
  lastActiveAt          DateTime          @default(now())
  lastActiveWorkspaceId String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  accounts              Account[]
  sentChannelInvites    ChannelInvite[]   @relation("ChannelInvitedBy")
  channelMembers        ChannelMember[]
  channelsCreated       Channel[]         @relation("UserChannelsCreated")
  messages              Message[]
  refreshTokens         RefreshToken[]
  sentWorkspaceInvites  WorkspaceInvite[] @relation("WorkspaceInvitedBy")
  workspaceMembers      WorkspaceMember[]
  ownedWorkspaces       Workspace[]       @relation("WorkspaceOwner")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Workspace {
  id          String            @id @default(cuid())
  name        String
  slug        String            @unique
  description String?
  imageUrl    String?
  ownerId     String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  channels    Channel[]
  invites     WorkspaceInvite[]
  members     WorkspaceMember[]
  owner       User              @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

model Channel {
  id          String          @id @default(cuid())
  slug        String          @unique
  name        String
  description String?
  workspaceId String
  createdById String
  isPublic    Boolean         @default(true)
  isDefault   Boolean         @default(false)
  isArchived  Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  invites     ChannelInvite[]
  members     ChannelMember[]
  tabs        ChannelTab[]
  createdBy   User            @relation("UserChannelsCreated", fields: [createdById], references: [id])
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@unique([workspaceId, name])
  @@map("channels")
}

model ChannelMember {
  id         String      @id @default(cuid())
  userId     String
  channelId  String
  role       ChannelRole @default(MEMBER)
  joinedAt   DateTime    @default(now())
  lastReadAt DateTime    @default(now())
  channel    Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
  @@map("channel_members")
}

model ChannelTab {
  id        String   @id @default(cuid())
  name      String
  type      TabType
  channelId String
  order     Int      @default(0)
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@map("channel_tabs")
}

model Message {
  id          String      @id @default(cuid())
  content     String
  channelId   String
  userId      String?
  parentId    String?
  editedAt    DateTime?
  isPinned    Boolean     @default(false)
  // 새로 추가된 필드들
  messageType MessageType @default(USER) // 메시지 타입
  systemData  Json? // 시스템 메시지 추가 데이터

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  channel   Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  parent    Message?  @relation("MessageThread", fields: [parentId], references: [id])
  replies   Message[] @relation("MessageThread")
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model WorkspaceInvite {
  id          String        @id @default(cuid())
  email       String
  workspaceId String
  invitedById String
  role        WorkspaceRole @default(MEMBER)
  status      InviteStatus  @default(PENDING)
  expiresAt   DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  code        String        @unique
  invitedBy   User          @relation("WorkspaceInvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([email, workspaceId])
  @@map("workspace_invites")
}

model ChannelInvite {
  id            String       @id @default(cuid())
  email         String
  channelId     String
  invitedById   String
  role          ChannelRole  @default(MEMBER)
  isGuestInvite Boolean      @default(false)
  status        InviteStatus @default(PENDING)
  expiresAt     DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  code          String       @unique
  channel       Channel      @relation(fields: [channelId], references: [id], onDelete: Cascade)
  invitedBy     User         @relation("ChannelInvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)

  @@unique([email, channelId])
  @@map("channel_invites")
}

enum MessageType {
  USER // 일반 사용자 메시지
  SYSTEM // 시스템 메시지 (채널 참가/탈퇴 등)
  BOT // 봇 메시지 (필요시)
}

enum UserStatus {
  ONLINE
  AWAY
  OFFLINE
  DO_NOT_DISTURB
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum ChannelRole {
  ADMIN
  MEMBER
}

enum TabType {
  CHAT
  BOARD
  DOCUMENT
  CANVAS
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
