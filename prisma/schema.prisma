generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id                      String     @id @default(cuid())
  email                   String     @unique
  name                    String?
  password                String?    //일반유저 패스워드
  profileImageUrl         String?    // 공개 URL
  profileImagePath        String?    // 스토리지 경로 (삭제용)
  status                  UserStatus @default(OFFLINE)
  lastActiveAt            DateTime   @default(now())
  lastActiveWorkspaceId   String?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  // OAuth 계정들
  accounts                Account[]
  refreshTokens           RefreshToken[]
  //workspace
  workspaceMembers        WorkspaceMember[]
  channelMembers          ChannelMember[]
  messages                Message[]
  // self join
  ownedWorkspaces         Workspace[] @relation("WorkspaceOwner")
  channelsCreated         Channel[] @relation("UserChannelsCreated")
  sentWorkspaceInvites    WorkspaceInvite[] @relation("WorkspaceInvitedBy")
  sentChannelInvites      ChannelInvite[] @relation("ChannelInvitedBy")

  @@map("users")
}

enum UserStatus {
  ONLINE
  AWAY
  OFFLINE
  DO_NOT_DISTURB
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Workspace {
  id                    String   @id @default(cuid())
  name                  String
  slug                  String   @unique
  description           String?
  imageUrl              String?
  ownerId               String
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  members               WorkspaceMember[]
  channels              Channel[]
  invites               WorkspaceInvite[]
  owner                 User @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("workspaces")
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime @default(now())
  
  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}


model Channel {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  workspaceId String
  createdById String
  isPublic    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  isArchived  Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdBy   User @relation("UserChannelsCreated",fields: [createdById], references: [id])
  members     ChannelMember[]
  messages    Message[]
  tabs        ChannelTab[]
  invites     ChannelInvite[]

  @@unique([workspaceId, name])
  @@map("channels")
}


model ChannelMember {
  id        String   @id @default(cuid())
  userId    String
  channelId String
  role      ChannelRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  lastReadAt DateTime @default(now())
  
  // Relations
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
  @@map("channel_members")
}

enum ChannelRole {
  ADMIN
  MEMBER
}


model ChannelTab {
  id        String   @id @default(cuid())
  name      String
  type      TabType
  channelId String
  order     Int      @default(0)
  data      Json?    // 탭별 추가 데이터 (보드 설정, 문서 내용 등)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@map("channel_tabs")
}

enum TabType {
  CHAT
  BOARD
  DOCUMENT
  CANVAS
}

model Message {
  id        String   @id @default(cuid())
  content   String
  channelId String
  userId    String
  parentId  String?  // 스레드용 (답글인 경우 원본 메시지 ID)
  editedAt  DateTime?
  isPinned  Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Message? @relation("MessageThread", fields: [parentId], references: [id])
  replies   Message[] @relation("MessageThread")

  @@map("messages")
}


//
model WorkspaceInvite {
  id          String   @id @default(cuid())
  email       String
  workspaceId String
  invitedById String
  role        WorkspaceRole @default(MEMBER)
  token       String   @unique @default(cuid()) // 초대 토큰
  status      InviteStatus @default(PENDING)
  expiresAt   DateTime // 만료일 (일반적으로 7일)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  // 워크스페이스 관계
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  // 유저와 관계
  invitedBy   User @relation("WorkspaceInvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)

  @@unique([email, workspaceId]) // 같은 워크스페이스에 같은 이메일로 중복 초대 방지
  @@map("workspace_invites")
}

// 채널 초대
model ChannelInvite {
  id          String   @id @default(cuid())
  email       String
  channelId   String
  invitedById String
  role        ChannelRole @default(MEMBER)
  isGuestInvite Boolean @default(false) // 게스트 초대 여부 (워크스페이스 멤버가 아닌 경우)
  token       String   @unique @default(cuid()) // 초대 토큰
  status      InviteStatus @default(PENDING)
  expiresAt   DateTime // 만료일 (일반적으로 7일)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  //채널 관계
  channel     Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  //유저와 관계
  invitedBy   User @relation("ChannelInvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)

  @@unique([email, channelId]) // 같은 채널에 같은 이메일로 중복 초대 방지
  @@map("channel_invites")
}

enum InviteStatus {
  PENDING    // 대기중
  ACCEPTED   // 수락됨
  DECLINED   // 거절됨
  EXPIRED    // 만료됨
}